<h1 class="text-3xl font-bold text-center my-8 pt-16">お店を登録する</h1>

<div class="flex justify-center items-center min-h-screen">
  <div class="w-full max-w-4xl bg-white shadow-md p-6 my-8 rounded-md rounded-xl">
    <%= form_with(model: @restaurant, class: "space-y-4") do |f| %>
      <%= render 'shared/error_messages', object: f.object %>

      <div>
        <%= f.label :restaurant_name, class: "block font-medium text-gray-700 text-lg" %>
        <%= f.text_field :name, id: 'restaurant-name', class: "mt-1 block w-full border-2 border-gray-90 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 py-2 px-2" %>
      </div>

      <div>
        <% @prefecture = Area1.all %>
        <%= f.label :area1, class: "block font-medium text-gray-700 text-lg" %>
        <%= f.collection_select :area1, @prefecture, :id, :name, { include_blank: "", selected: params[:area1] }, { id: "prefectureSelect", class: "mt-1 block w-full border-2 border-gray-90 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 py-2 px-2" } %>
      </div>

      <div>
        <% area2 = Area2.all %>
        <% @cities_json = area2.map { |o| o.attributes.symbolize_keys.select { |k, v| k.match(/(id|area1_id|city)\z/) } } %>
        <% @cities = Area2.where(area1_id: params[:area1]) %>
        <%= f.label :area2, class: "block font-medium text-gray-700 text-lg" %>
        <%= f.collection_select :area2, @cities, :id, :city, { include_blank: "", selected: params[:area2] }, { id: "citySelect", class: "mt-1 block w-full border-2 border-gray-90 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 py-2 px-2", data: { json: @cities_json } } %>
      </div>

      <div>
        <% @timing = Timing.all %>
        <%= f.label :timing, class: "block font-medium text-gray-700 text-lg" %>
        <%= f.collection_select :timing, @timing, :id, :timing, { include_blank: "", selected: params[:timing] }, { id: "timigSelect", class: "mt-1 block w-full border-2 border-gray-90 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 py-2 px-2" } %>
      </div>
 
      <div>
        <% @genre = Genre.all %>
        <%= f.label :genre, class: "block font-medium text-gray-700 text-lg" %>
        <%= f.collection_select :genre, @genre, :id, :genre, { include_blank: "", selected: params[:genre] }, { id: "genreSelect", class: "mt-1 block w-full border-2 border-gray-90 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 py-2 px-2" } %>
      </div>

      <div>
        <%= f.label :coment, class: "block font-medium text-gray-700 text-lg" %>
       <%= f.text_area :coment, id: 'coment', class: "mt-1 block w-full border-2 border-gray-90 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 py-2 px-4 h-24 text-start leading-tight" %></div>
     
      <%= f.hidden_field :lat, id:'lat' %>
      <%= f.hidden_field :lng, id:'lng' %>

      <div>
        <%= f.label :image, class: "block font-medium text-gray-700 text-lg" %>
         <%= f.file_field :images, multiple: true, accept: "image/jpeg,image/gif,image/png", class:  %>
      </div>
          <!-- 地図情報部分をフォームの中に配置 -->
    <h2 class="text-xl text-center font-light text-gray-600 my-4">地図情報を追加したい場合はこちら！</h2>
    <div class="space-y-4">
      <input id="address" type="textbox" value="東京駅 ランチ" class="block w-full border-2 border-gray-90 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 py-3 px-4" />
      <input type="button" value="検索" onclick="codeAddress()" class="text-xl block w-full py-2 px-4 bg-sky-600 text-white font-medium rounded-md shadow hover:bg-indigo-700 focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2" />
    </div>

    <div id="map" class="w-full h-96 mt-4 border rounded-md"></div>
          <%= f.submit "お店を追加", class: "text-xl w-full py-2 px-4 bg-sky-600 text-white font-medium rounded-md shadow hover:bg-indigo-700 focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2" %>
    <% end %>
  </div>
</div>
<script>
document.addEventListener('turbo:load', () => {
    // 地図要素が存在する場合に初期化
    const mapElement = document.getElementById('map');
    if (mapElement) {
      const lat = parseFloat(mapElement.dataset.lat) || 35.6803997; // 緯度 (デフォルト: 東京駅)
      const lng = parseFloat(mapElement.dataset.lng) || 139.7690174; // 経度 (デフォルト: 東京駅)
      
      // Google Maps API がロードされている場合のみ初期化
      if (typeof google !== 'undefined' && typeof google.maps !== 'undefined') {
        initMap(lat, lng);
      }
    }
  });
  
  let map;
  let marker;
  let geocoder;
  
  // initMap を定義
  function initMap(lat, lng) {
    geocoder = new google.maps.Geocoder();
  
    // 地図の初期化
    map = new google.maps.Map(document.getElementById('map'), {
      center: { lat: lat, lng: lng },
      zoom: 15,
    });
  
    // マーカーの設定
    marker = new google.maps.Marker({
      map: map,
      position: { lat: lat, lng: lng },
      draggable: true, // ドラッグ可能
    });
  
    // マーカーをドラッグしたときのイベント
    google.maps.event.addListener(marker, 'dragend', function (ev) {
      document.getElementById('lat').value = ev.latLng.lat();
      document.getElementById('lng').value = ev.latLng.lng();
    });
  }
  
  // codeAddress を定義
  window.codeAddress = function () {
    const inputAddress = document.getElementById('address').value;
  
    geocoder.geocode({ address: inputAddress }, function (results, status) {
      if (status === 'OK') {
        // マーカーが既に存在する場合は削除
        if (marker) marker.setMap(null);
  
        // 地図の中心を設定
        map.setCenter(results[0].geometry.location);
  
        // 新しいマーカーを作成
        marker = new google.maps.Marker({
          map: map,
          position: results[0].geometry.location,
          draggable: true,
        });
  
        // 緯度と経度を DOM に設定
        document.getElementById('lat').value = results[0].geometry.location.lat();
        document.getElementById('lng').value = results[0].geometry.location.lng();
  
        // ドラッグイベントを再設定
        google.maps.event.addListener(marker, 'dragend', function (ev) {
          document.getElementById('lat').value = ev.latLng.lat();
          document.getElementById('lng').value = ev.latLng.lng();
        });
      } else {
        alert('該当する住所が見つかりませんでした: ' + status);
      }
    });
  };
</script>
<script src="https://maps.googleapis.com/maps/api/js?key=<%= Rails.application.credentials.google_maps[:api_key] %>&callback=initMap" async defer></script>